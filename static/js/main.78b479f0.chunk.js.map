{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAEaA,EAAK,SAAAC,GAAK,OACnB,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCDTC,EAAS,SAACR,GACtB,OACG,qBAAKC,UAAU,YAAf,SACMD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,cAAC,EAAD,CAAyBA,QAASA,GAAvBA,EAAQE,YCJpBK,G,YAAU,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAcC,EAAhB,EAAgBA,aAAhB,OAClB,uBAAOC,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCqC/CG,E,kDAlCb,aAAc,IAAD,8BACX,gBAEKC,MAAM,CACTR,SAAS,GACTS,YAAY,IALH,E,qDASb,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAE,EAAKC,SAAS,CAACf,SAASc,S,oBAItE,WAAS,IAAD,OACN,EAA+BE,KAAKR,MAA7BR,EAAP,EAAOA,SAASS,EAAhB,EAAgBA,YACVQ,EAAiBjB,EAASkB,QAAO,SAAAvB,GAAO,OAC7CA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYY,wBAEhD,OACE,sBAAK7B,UAAU,MAAf,UACA,iDACD,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAc,SAAAkB,GAAC,OAAE,EAAKP,SAAS,CAACN,YAAYa,EAAEC,OAAOC,WAC7F,cAAC,EAAD,CAAUxB,SAAUiB,EAApB,sB,GAzBUQ,aCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.78b479f0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\nexport const Card=props=>(\r\n    <div className=\"card-container\">\r\n    <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n    <h2>{props.monster.name}</h2>\r\n    <p>{props.monster.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport './card-list.styles.css';\r\n\r\nimport {Card} from '../card/card.component';\r\n\r\nexport const CardList=(props)=> {\r\n return (\r\n    <div className='card-list'>\r\n         {props.monsters.map(monster => (\r\n              <Card key={monster.name} monster={monster}/>\r\n         ))}\r\n    </div>)\r\n}","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\n\r\nexport const SearchBox=({placeholder , handleChange})=> (\r\n     <input type=\"search\" placeholder={placeholder} onChange={handleChange}/>\r\n     );\r\n","import { Component } from 'react';\n\nimport {CardList} from './components/card-list/card-list.component'\n\nimport './App.css';\nimport { SearchBox } from './components/search-box/search-box.component';\n\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state={\n      monsters:[],\n      searchField:\"\"\n    } \n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=>response.json()).then(users=>this.setState({monsters:users}))\n  }\n\n\n   render(){\n     const {monsters,searchField }= this.state;\n     const filteredMonsters=monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n      )\n      return  (\n        <div className=\"App\">\n        <h1>MONSTER ROLODEX</h1>\n       <SearchBox placeholder=\"Search Monsters\" handleChange={e=>this.setState({searchField:e.target.value})} />\n        <CardList monsters={filteredMonsters}>{\n       \n        } </CardList>\n          \n        </div>\n      )  \n      \n   }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}